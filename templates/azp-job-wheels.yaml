# https://dev.azure.com/home-assistant

parameters:
- name: builderVersion
  type: string
- name: builderApk
  type: string
  default: 'build-base'
- name: builderPip
  type: string
  default: 'Cython'
- name: builderArch
  type: object
  default:
  - amd64
  - i386
  - armhf
  - armv7
  - aarch64
- name: builderPath
  type: string
  default: ''
- name: builderEnvFile
  type: boolean
  default: false
- name: wheelsRequirement
  type: string
  default: ''
- name: wheelsRequirementDiff
  type: string
  default: ''
- name: wheelsPrebuildDir
  type: string
  default: ''
- name: wheelsSingle
  type: boolean
  default: false
- name: wheelsLocal
  type: boolean
  default: false
- name: preBuild
  type: stepList
  default: []
- name: jobName
  type: string
  default: 'Wheels'


jobs:
- job: '${{ parameters.jobName }}'
  timeoutInMinutes: 360
  strategy:
    matrix:
      ${{ each arch in parameters.builderArch }}:
        ${{ arch }}:
          buildArch: ${{ arch }}
          ${{ if eq(arch, 'amd64') }}:
            agentArch: X64
          ${{ if eq(arch, 'i386') }}:
            agentArch: X64
          ${{ if eq(arch, 'armhf') }}:
            agentArch: ARM
          ${{ if eq(arch, 'armv7') }}:
            agentArch: ARM
          ${{ if eq(arch, 'aarch64') }}:
            agentArch: ARM
  pool:
    name: BuildCluster
    demands:
    - Agent.OSArchitecture -equals $(agentArch)
  variables:
  - group: wheels

  steps:
  - script: |
      mkdir -p .ssh
      echo -e "-----BEGIN RSA PRIVATE KEY-----\n$(wheelsSSH)\n-----END RSA PRIVATE KEY-----" >> .ssh/id_rsa
      ssh-keyscan -H $(wheelsHost) >> .ssh/known_hosts
      chmod 600 .ssh/*
    displayName: 'Install ssh key'
  - script: |
      docker pull homeassistant/$(buildArch)-wheels:${{ parameters.builderVersion }}
    displayName: 'Install wheels builder'
  - ${{ parameters.preBuild }}
  - script: |
      build_args=()
      docker_args=()
      docker_data=()
      container_id="${{ parameters.jobName }}-$(Build.BuildId)-$(Build.BuildNumber)-$(buildArch)"

      # Data Path
      if [ -n "${{ parameters.builderPath }}" ]; then
        data_path="$(pwd)/${{ parameters.builderPath }}"
      else
        data_path="$(pwd)"
      fi

      # Environment
      if [ "${{ parameters.builderEnvFile }}" == "true" ] && [ -f .env_file ]; then
        docker_args+=(--env-file .env_file)
      fi

      if [ -f "${{ parameters.wheelsRequirement }}" ]; then
        build_args+=(--requirement "${{ parameters.wheelsRequirement }}")
      fi

      if [ -f "${{ parameters.wheelsRequirementDiff }}" ]; then
        build_args+=(--requirement-diff "${{ parameters.wheelsRequirementDiff }}")
      fi

      if [ -d "${{ parameters.wheelsPrebuildDir }}" ]; then
        build_args+=(--prebuild-dir "${{ parameters.wheelsPrebuildDir }}")
      fi

      if [ "${{ parameters.wheelsSingle }}" == "true" ]; then
        build_args+=(--single)
      fi

      if [ "${{ parameters.wheelsLocal }}" == "true" ]; then
        build_args+=(--local)
      fi

      # Create container
      echo "Create container: ${container_id}"
      docker create --name "${container_id}" -t \
        "${docker_args[@]}" \
        homeassistant/$(buildArch)-wheels:${{ parameters.builderVersion }} \
          --apk "${{ parameters.builderApk }}" \
          --pip "${{ parameters.builderPip }}" \
          --index $(wheelsIndex) \
          --upload rsync \
          --remote wheels@$(wheelsHost):/opt/wheels \
          "${build_args[@]}"

      # Copy file in & Inject SSH files
      docker cp -a "${data_path}/." "${container_id}:/data/"
      docker cp -a .ssh/ "${container_id}:/root/.ssh"

      # Create wheels
      docker start -a "${container_id}"
    displayName: 'Run wheels build'
  - script: |
      docker rm -f "${{ parameters.jobName }}-$(Build.BuildId)-$(Build.BuildNumber)-$(buildArch)"
    displayName: 'Cleanup wheels build'
    condition: always()
